Here i have built a pet database and student database using them to perform serveral analysis                  
                  
the ALTER TABLE, DROP TABLE, and TRUNCATE statements. 
create table country (
id int NOT NULL,
ccode char(2),
name varchar(60),
primarykey (id)
);


CREATE TABLE PETSALE (
    ID INTEGER NOT NULL,
    PET CHAR(20),
    SALEPRICE DECIMAL(6,2),
    PROFIT DECIMAL(6,2),
    SALEDATE DATE
    );

 
CREATE TABLE PET (
    ID INTEGER NOT NULL,
    ANIMAL VARCHAR(20),
    QUANTITY INTEGER
    );


INSERT INTO PETSALE VALUES
    (1,'Cat',450.09,100.47,'2018-05-29'),
    (2,'Dog',666.66,150.76,'2018-06-01'),
    (3,'Parrot',50.00,8.9,'2018-06-04'),
    (4,'Hamster',60.60,12,'2018-06-11'),
    (5,'Goldfish',48.48,3.5,'2018-06-14');
    
INSERT INTO PET VALUES
    (1,'Cat',3),
    (2,'Dog',4),
    (3,'Hamster',2);
    
SELECT * FROM PETSALE;
SELECT * FROM PET;


ALTER TABLE PETSALE
ADD COLUMN QUANTITY INTEGER;

SELECT * FROM PETSALE;

UPDATE PETSALE SET QUANTITY = 9 WHERE ID = 1;
UPDATE PETSALE SET QUANTITY = 3 WHERE ID = 2;
UPDATE PETSALE SET QUANTITY = 2 WHERE ID = 3;
UPDATE PETSALE SET QUANTITY = 6 WHERE ID = 4;
UPDATE PETSALE SET QUANTITY = 24 WHERE ID = 5;

SELECT * FROM PETSALE;

ALTER TABLE PETSALE
DROP COLUMN PROFIT;

SELECT * FROM PETSALE;

ALTER TABLE PETSALE
ALTER COLUMN PET SET DATA TYPE VARCHAR(20);

SELECT * FROM PETSALE;

ALTER TABLE PETSALE
RENAME COLUMN PET TO ANIMAL;

SELECT * FROM PETSALE;


TRUNCATE TABLE PET IMMEDIATE;

SELECT * FROM PET;



DROP TABLE PET;
SELECT * FROM PET;DROP TABLE PET;
SELECT * FROM PET;


Retrieve all employees whose address is in Elgin,IL.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
WHERE ADDRESS LIKE '%Elgin,IL%';

Retrieve all employees who were born during the 1970's.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
WHERE B_DATE LIKE '197%';

Retrieve all employees in department 5 whose salary is between 60000 and 70000.
SELECT *
FROM EMPLOYEES
WHERE (SALARY BETWEEN 60000 AND 70000) AND DEP_ID = 5;

Retrieve a list of employees ordered by department ID.
SELECT F_NAME, L_NAME, DEP_ID 
FROM EMPLOYEES
ORDER BY DEP_ID;

Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name.
SELECT F_NAME, L_NAME, DEP_ID 
FROM EMPLOYEES
ORDER BY DEP_ID DESC, L_NAME DESC;


In SQL problem 2 (Exercise 2 Problem 2), use department name instead of department ID. Retrieve a list of employees ordered by department name, and within each department ordered alphabetically in descending order by last name.
SELECT D.DEP_NAME , E.F_NAME, E.L_NAME
FROM EMPLOYEES as E, DEPARTMENTS as D
WHERE E.DEP_ID = D.DEPT_ID_DEP
ORDER BY D.DEP_NAME, E.L_NAME DESC;

For each department ID retrieve the number of employees in the department.
SELECT DEP_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEP_ID;


For each department retrieve the number of employees in the department, and the average employee salary in the department..
SELECT DEP_ID, COUNT(*), AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEP_ID;

Label the computed columns in the result set of SQL problem 2 (Exercise 3 Problem 2) as NUM_EMPLOYEES and AVG_SALARY.
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID;

In SQL problem 3 (Exercise 3 Problem 3), order the result set by Average Salary..
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
ORDER BY AVG_SALARY;


In SQL problem 4 (Exercise 3 Problem 4), limit the result to departments with fewer than 4 employees.
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
HAVING count(*) < 4
ORDER BY AVG_SALARY;




Query A1: Enter a function that calculates the total cost of all animal rescues in the PETRESCUE table.

select SUM(COST) from PETRESCUE;

Query A2: Enter a function that displays the total cost of all animal rescues in the PETRESCUE table in a column called SUM_OF_COST.

select SUM(COST) AS SUM_OF_COST from PETRESCUE;

Query A3: Enter a function that displays the maximum quantity of animals rescued.

select MAX(QUANTITY) from PETRESCUE;

Query A4: Enter a function that displays the average cost of animals rescued.

select AVG(COST) from PETRESCUE;

Query A5: Enter a function that displays the average cost of rescuing a dog. Hint - Bear in my the cost of rescuing one dog on day, is different from another day. So you will have to use and average of averages.

select AVG(COST/QUANTITY) from PETRESCUE where ANIMAL = 'Dog';

Functions
Query B1: Enter a function that displays the rounded cost of each rescue.

select ROUND(COST) from PETRESCUE;

Query B2: Enter a function that displays the length of each animal name.

select LENGTH(ANIMAL) from PETRESCUE;

Query B3: Enter a function that displays the animal name in each rescue in uppercase.

select UCASE(ANIMAL) from PETRESCUE;

Query B4: Enter a function that displays the animal name in each rescue in uppercase without duplications.

select DISTINCT(UCASE(ANIMAL)) from PETRESCUE;

Query B5: Enter a query that displays all the columns from the PETRESCUE table, where the animal(s) rescued are cats. Use cat in lower case in the query.

select * from PETRESCUE where LCASE(ANIMAL) = 'cat';


Query C2: Enter a function that displays the number of rescues on the 5th month.

select SUM(QUANTITY) from PETRESCUE where MONTH(RESCUEDATE)='05';

Query C3: Enter a function that displays the number of rescues on the 14th day of the month.

select SUM(QUANTITY) from PETRESCUE where DAY(RESCUEDATE)='14';

Query C4: Animals rescued should see the vet within three days of arrivals. Enter a function that displays the third day from each rescue.

select (RESCUEDATE + 3 DAYS) from PETRESCUE;

Query C5: Enter a function that displays the length of time the animals have been rescued; the difference between todayâ€™s date and the recue date.

select (CURRENT DATE - RESCUEDATE) from PETRESCUE;
